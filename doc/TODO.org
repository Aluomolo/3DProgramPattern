* DONE change to rescript

# * TODO use english comment instead of chinese comment

* DONE refactor: use worldState instead managerState in exec func

* DONE multithread demo


** DONE no worker

draw one triangle

draw 3000 triangles



** DONE open render worker


** DONE optimize: change programMap to program

# ** TODO move build model matrix to update->BuildModelMatrixJob
# ** TODO update add DoSomeHeaveComputeJob
** DONE add localToWorlds, add UpdateTransformJob

add


compute fps, timeline



** DONE update add //ComputeCollisionJob ComputePhysicsJob


** DONE move ComputePhysicsJob to physics worker


worker


noWorker add it


# ** TODO open more workers by pipeline + json



# ** TODO shared DO by SharedArrayBuffer

** DONE rename story_after to story_improve

** DONE support worker, no worker


** DONE add UMLs

before

improve

abstract



# 类图

时序图
two frame

three worker

post message

SharedArrayBuffer


** DONE add abstract code


* TODO glsl build demo

** DONE glsl compiler->ShaderChunks

# change to rescript

# add as gulp task

# pass run test


////clean first



** DONE 

- load json
use most

配置数据
    shaders.json
    shader_libs.json

- parse json


run test in engine/

** DONE 
independent, add funcs to handle branch



# - handle shader libs with shader config
# static branch
#     fixed branch name
# dynamic branch
#     fixed

# <!-- define:
# handle define const -->


# pass run test

- handle sender
sender: add to specific sender array
attribute
uniform


add pos, type, send func, ...


engine:
add sendDataArr to state;
add log: create shader with glsl
add RenderJob:
    use it when draw;


pass run test

** DONE refactor: uniform material_shaders, no_material_shaders to shaders

remove material concept


# ** TODO rename splice_pattern_engine to engine


** TODO 
- get shaderChunks to state
- Builder: shader libs + ShaderChunks to vs glsl, fs glsl
support all parts




result:
glsl
sender







** TODO refactor glsl: only remain used glsl

** TODO refactor: clean code


* TODO 重命名“类图”为“领域模型”

* TODO 抽象代码都用Typescript

* TODO give where has code, uml and how to run code and run result for each example


* TODO 修改接口为type，《type》


* TODO 简化UML


* TODO package.json supply dependencies, devDependencies
e.g. most, commonlib